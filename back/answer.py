"""ChatGPT funcs for the bot"""

import openai
from config.conf import OPENAI_API_KEY


client = openai.OpenAI(api_key=OPENAI_API_KEY)


def get_instruction() -> str:
    """Creates instruction for the bot"""
    instruction = """–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ —á–∞—Ç-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å \
        –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, \
             –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä–æ–ª–∏—Ç—å. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ \
                - –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ \
                    –æ—Ç —Ç–æ–≥–æ —á–µ–≥–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –î–∞–π —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç"""
    return instruction


def get_question(message) -> str:
    """Get question from the user"""

    question = f"""{message}"""
    return question


def got_problem() -> str:
    """Sends message with the GPT error"""

    txt = """–ù–∞ —ç—Ç–∞–ø–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ üòî\n\n\
        –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @botrqst"""
    return txt


def create_answer(message: str):
    """Gets answer from the GPT for the user"""
    try:
        completion = client.chat.completions.create(
            messages=[
                {"role": "developer", "content": get_instruction()},
                {
                    "role": "user",
                    "content": get_question(message),
                },
            ],
            model="gpt-4o"
        )
        answer = completion.choices[0].message.content
    except (
        openai.RateLimitError,
        openai.AuthenticationError,
        openai.APIConnectionError,
        openai.APIStatusError,
        openai.OpenAIError
    ):
        return got_problem()

    if answer is None:
        return "–ú–æ–¥–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å üôÅ"
    return answer
